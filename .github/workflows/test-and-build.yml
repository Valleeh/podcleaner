name: Test and Build PodCleaner

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install test dependencies
        pip install pytest pytest-cov
        # Install package in development mode
        pip install -e .
    
    - name: Run tests with coverage
      run: |
        pytest -xvs --cov=podcleaner --cov-report=term --cov-report=html tests/
        
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage and check if it meets threshold
        coverage_percent=$(pytest --cov=podcleaner tests/ | grep TOTAL | awk '{print $NF}' | sed 's/%//')
        echo "Total coverage: $coverage_percent%"
        
        # Set your desired coverage threshold here
        threshold=70
        
        if (( $(echo "$coverage_percent < $threshold" | bc -l) )); then
          echo "Coverage is below threshold of $threshold%"
          exit 1
        else
          echo "Coverage meets threshold of $threshold%"
        fi
    
    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: htmlcov/
  
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build and export Docker images
      run: |
        docker-compose build
    
    - name: Verify Docker images
      run: |
        docker images
    
    # If you want to push to a registry, uncomment and configure:
    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_TOKEN }}
    #
    # - name: Push Docker images
    #   run: |
    #     docker-compose push 